import numpy as np
import pytest
from polyrat import *




@pytest.mark.parametrize("M", [500])
@pytest.mark.parametrize("degree", [0,1,2,5])
@pytest.mark.parametrize("dim", [1,3,5])
@pytest.mark.parametrize("Basis", 
	[MonomialPolynomialBasis,
	 LegendrePolynomialBasis,
	 ChebyshevPolynomialBasis,
	 HermitePolynomialBasis, 
	 LaguerrePolynomialBasis,
	 ArnoldiPolynomialBasis])
@pytest.mark.parametrize("seed", [0])
def test_monomial_total(M, degree, dim, Basis, seed):
	r""" Check that a vector constructed in the monomial basis 
	is in the space generated by the Vandermonde matrix
	"""
	np.random.seed(seed)
	X = np.random.randn(M, dim)
	basis = Basis(X, degree)

	V = basis.basis()
	Q, R = np.linalg.qr(V)

	for idx in total_degree_index(dim, degree):
		y = np.ones(M)
		for j in range(dim):
			y *= X[:,j]**idx[j]
		
		err = y - Q @ Q.T.conj() @ y
		err_norm = np.linalg.norm(err)
		print("idx", idx, "error", err_norm)
		assert err_norm < 5e-9, "Vector not contained in space"

@pytest.mark.parametrize("M", [500])
@pytest.mark.parametrize("degree",[
	(0,),
	(1,),
	(5,),
	(1,1),
	(5,1),
	(0,5,1),
	(5,0,1),
	(2,2,2), 
	])
@pytest.mark.parametrize("Basis", 
	[MonomialPolynomialBasis,
	 LegendrePolynomialBasis,
	 ChebyshevPolynomialBasis,
	 HermitePolynomialBasis, 
	 LaguerrePolynomialBasis,
	 ArnoldiPolynomialBasis])
@pytest.mark.parametrize("seed", [0])
def test_monomial_max(M, degree, Basis, seed):
	np.random.seed(seed)
	X = np.random.randn(M, len(degree))
	basis = Basis(X, degree)

	V = basis.basis()
	Q, R = np.linalg.qr(V)

	for idx in max_degree_index(degree):
		y = np.ones(M)
		for j in range(len(degree)):
			y *= X[:,j]**idx[j]
		
		err = y - Q @ Q.T.conj() @ y
		err_norm = np.linalg.norm(err)
		print("idx", idx, "error", err_norm)
		assert err_norm < 1e-8, "Vector not contained in space"




if __name__ == '__main__':
	#test_monomial_total(100, 10, 3, MonomialPolynomialBasis,0) 
	test_monomial_max(100, [4], MonomialPolynomialBasis,0) 
